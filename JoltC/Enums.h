#pragma once

#include <stdint.h>

const int JPC_MAX_PHYSICS_JOBS     = 2048;
const int JPC_MAX_PHYSICS_BARRIERS = 8;

typedef enum JPC_ShapeType {
    JPC_SHAPE_TYPE_CONVEX,
    JPC_SHAPE_TYPE_COMPOUND,
    JPC_SHAPE_TYPE_DECORATED,
    JPC_SHAPE_TYPE_MESH,
    JPC_SHAPE_TYPE_HEIGHT_FIELD,
    JPC_SHAPE_TYPE_SOFTBODY,
    JPC_SHAPE_TYPE_USER1,
    JPC_SHAPE_TYPE_USER2,
    JPC_SHAPE_TYPE_USER3,
    JPC_SHAPE_TYPE_USER4,
} JPC_ShapeType;

typedef enum JPC_ShapeSubType {
    JPC_SHAPE_SUB_TYPE_SPHERE,
    JPC_SHAPE_SUB_TYPE_BOX,
    JPC_SHAPE_SUB_TYPE_TRIANGLE,
    JPC_SHAPE_SUB_TYPE_CAPSULE,
    JPC_SHAPE_SUB_TYPE_TAPEREDCAPSULE,
    JPC_SHAPE_SUB_TYPE_CYLINDER,
    JPC_SHAPE_SUB_TYPE_CONVEX_HULL,
    JPC_SHAPE_SUB_TYPE_STATIC_COMPOUND,
    JPC_SHAPE_SUB_TYPE_MUTABLE_COMPOUND,
    JPC_SHAPE_SUB_TYPE_ROTATED_TRANSLATED,
    JPC_SHAPE_SUB_TYPE_SCALED,
    JPC_SHAPE_SUB_TYPE_OFFSET_CENTER_OF_MASS,
    JPC_SHAPE_SUB_TYPE_MESH,
    JPC_SHAPE_SUB_TYPE_HEIGHT_FIELD,
    JPC_SHAPE_SUB_TYPE_SOFT_BODY,
    JPC_SHAPE_SUB_TYPE_USER1,
    JPC_SHAPE_SUB_TYPE_USER2,
    JPC_SHAPE_SUB_TYPE_USER3,
    JPC_SHAPE_SUB_TYPE_USER4,
    JPC_SHAPE_SUB_TYPE_USER5,
    JPC_SHAPE_SUB_TYPE_USER6,
    JPC_SHAPE_SUB_TYPE_USER7,
    JPC_SHAPE_SUB_TYPE_USER8,
    JPC_SHAPE_SUB_TYPE_USER_CONVEX1,
    JPC_SHAPE_SUB_TYPE_USER_CONVEX2,
    JPC_SHAPE_SUB_TYPE_USER_CONVEX3,
    JPC_SHAPE_SUB_TYPE_USER_CONVEX4,
    JPC_SHAPE_SUB_TYPE_USER_CONVEX5,
    JPC_SHAPE_SUB_TYPE_USER_CONVEX6,
    JPC_SHAPE_SUB_TYPE_USER_CONVEX7,
    JPC_SHAPE_SUB_TYPE_USER_CONVEX8,
} JPC_ShapeSubType;

typedef uint32_t JPC_PhysicsUpdateError;
const JPC_PhysicsUpdateError JPC_PHYSICS_UPDATE_ERROR_NONE                     = 0;
const JPC_PhysicsUpdateError JPC_PHYSICS_UPDATE_ERROR_MANIFOLD_CACHE_FULL      = 1 << 0;
const JPC_PhysicsUpdateError JPC_PHYSICS_UPDATE_ERROR_BODY_PAIR_CACHE_FULL     = 1 << 1;
const JPC_PhysicsUpdateError JPC_PHYSICS_UPDATE_ERROR_CONTACT_CONSTRAINTS_FULL = 1 << 2;

typedef enum JPC_ConstraintType {
    JPC_CONSTRAINT_TYPE_CONSTRAINT,
    JPC_CONSTRAINT_TYPE_TWO_BODY_CONSTRAINT,
} JPC_ConstraintType;

typedef enum JPC_ConstraintSubType {
    JPC_CONSTRAINT_SUB_TYPE_FIXED,
    JPC_CONSTRAINT_SUB_TYPE_POINT,
    JPC_CONSTRAINT_SUB_TYPE_HINGE,
    JPC_CONSTRAINT_SUB_TYPE_SLIDER,
    JPC_CONSTRAINT_SUB_TYPE_DISTANCE,
    JPC_CONSTRAINT_SUB_TYPE_CONE,
    JPC_CONSTRAINT_SUB_TYPE_SWING_TWIST,
    JPC_CONSTRAINT_SUB_TYPE_SIX_DOF,
    JPC_CONSTRAINT_SUB_TYPE_PATH,
    JPC_CONSTRAINT_SUB_TYPE_VEHICLE,
    JPC_CONSTRAINT_SUB_TYPE_RACK_AND_PINION,
    JPC_CONSTRAINT_SUB_TYPE_GEAR,
    JPC_CONSTRAINT_SUB_TYPE_PULLEY,
    JPC_CONSTRAINT_SUB_TYPE_USER1,
    JPC_CONSTRAINT_SUB_TYPE_USER2,
    JPC_CONSTRAINT_SUB_TYPE_USER3,
    JPC_CONSTRAINT_SUB_TYPE_USER4,
} JPC_ConstraintSubType;

typedef enum JPC_ConstraintSpace {
    JPC_CONSTRAINT_SPACE_LOCAL_TO_BODY_COM,
    JPC_CONSTRAINT_SPACE_WORLD_SPACE,
} JPC_ConstraintSpace;

typedef enum JPC_MotionType {
    JPC_MOTION_TYPE_STATIC,
    JPC_MOTION_TYPE_KINEMATIC,
    JPC_MOTION_TYPE_DYNAMIC,
} JPC_MotionType;

typedef enum JPC_MotionQuality {
    JPC_MOTION_QUALITY_DISCRETE,
    JPC_MOTION_QUALITY_LINEAR_CAST,
} JPC_MotionQuality;

typedef enum JPC_OverrideMassProperties {
    JPC_OVERRIDE_MASS_PROPS_CALC_MASS_INERTIA,
    JPC_OVERRIDE_MASS_PROPS_CALC_INERTIA,
    JPC_OVERRIDE_MASS_PROPS_MASS_INERTIA_PROVIDED,
} JPC_OverrideMassProperties;

typedef enum JPC_GroundState {
    JPC_CHARACTER_GROUND_STATE_ON_GROUND,
    JPC_CHARACTER_GROUND_STATE_ON_STEEP_GROUND,
    JPC_CHARACTER_GROUND_STATE_NOT_SUPPORTED,
    JPC_CHARACTER_GROUND_STATE_IN_AIR,
} JPC_GroundState;

// ENSURE_ENUM_EQ(JPC_CHARACTER_GROUND_STATE_ON_GROUND, JPH::EGroundState::OnGround)
// ENSURE_ENUM_EQ(JPC_CHARACTER_GROUND_STATE_ON_STEEP_GROUND, JPH::EGroundState::OnSteepGround)
// ENSURE_ENUM_EQ(JPC_CHARACTER_GROUND_STATE_NOT_SUPPORTED, JPH::EGroundState::NotSupported)
// ENSURE_ENUM_EQ(JPC_CHARACTER_GROUND_STATE_IN_AIR, JPH::EGroundState::InAir)

typedef enum JPC_Activation {
    JPC_ACTIVATION_ACTIVATE      = 0,
    JPC_ACTIVATION_DONT_ACTIVATE = 1,
} JPC_Activation;

typedef enum JPC_ValidateResult {
    JPC_VALIDATE_RESULT_ACCEPT_ALL_CONTACTS,
    JPC_VALIDATE_RESULT_ACCEPT_CONTACT,
    JPC_VALIDATE_RESULT_REJECT_CONTACT,
    JPC_VALIDATE_RESULT_REJECT_ALL_CONTACTS,
} JPC_ValidateResult;

typedef enum JPC_BackFaceMode {
    JPC_BACK_FACE_IGNORE,
    JPC_BACK_FACE_COLLIDE,
} JPC_BackFaceMode;

typedef enum JPC_BodyType {
    JPC_BODY_TYPE_RIGID_BODY = 0,
    JPC_BODY_TYPE_SOFT_BODY  = 1,
} JPC_BodyType;

typedef enum JPC_AllowedDOFs {
    JPC_ALLOWED_DOFS_NONE         = 0,
    JPC_ALLOWED_DOFS_ALL          = 63,
    JPC_ALLOWED_DOFS_TRANSLATIONX = 1,
    JPC_ALLOWED_DOFS_TRANSLATIONY = 2,
    JPC_ALLOWED_DOFS_TRANSLATIONZ = 4,
    JPC_ALLOWED_DOFS_ROTATIONX    = 8,
    JPC_ALLOWED_DOFS_ROTATIONY    = 16,
    JPC_ALLOWED_DOFS_ROTATIONZ    = 32,
    JPC_ALLOWED_DOFS_PLANE2D      = JPC_ALLOWED_DOFS_TRANSLATIONX | JPC_ALLOWED_DOFS_TRANSLATIONY | JPC_ALLOWED_DOFS_ROTATIONZ,
} JPC_AllowedDOFs;

typedef enum JPC_Features {
    JPC_FEATURE_DOUBLE_PRECISION          = (1 << 0),
    JPC_FEATURE_NEON                      = (1 << 1),
    JPC_FEATURE_SSE                       = (1 << 2),
    JPC_FEATURE_SSE4_1                    = (1 << 3),
    JPC_FEATURE_SSE4_2                    = (1 << 4),
    JPC_FEATURE_AVX                       = (1 << 5),
    JPC_FEATURE_AVX2                      = (1 << 6),
    JPC_FEATURE_AVX512                    = (1 << 7),
    JPC_FEATURE_F16C                      = (1 << 8),
    JPC_FEATURE_LZCNT                     = (1 << 9),
    JPC_FEATURE_TZCNT                     = (1 << 10),
    JPC_FEATURE_FMADD                     = (1 << 11),
    JPC_FEATURE_PLATFORM_DETERMINISTIC    = (1 << 12),
    JPC_FEATURE_FLOATING_POINT_EXCEPTIONS = (1 << 13),
    JPC_FEATURE_DEBUG                     = (1 << 14),
} JPC_Features;

typedef int JPC_ShapeColor;
const JPC_ShapeColor JPC_SHAPE_COLOR_INSTANCE_COLOR    = 0;
const JPC_ShapeColor JPC_SHAPE_COLOR_SHAPE_TYPE_COLOR  = 1;
const JPC_ShapeColor JPC_SHAPE_COLOR_MOTION_TYPE_COLOR = 2;
const JPC_ShapeColor JPC_SHAPE_COLOR_SLEEP_COLOR       = 3;
const JPC_ShapeColor JPC_SHAPE_COLOR_ISLAND_COLOR      = 4;
const JPC_ShapeColor JPC_SHAPE_COLOR_MATERIAL_COLOR    = 5;
